import PySimpleGUI as sg
import time, datetime
import os
import pathlib

from pomodoro_modules import (Utilities, ErrorsHandling)


class OptionsMenu(ErrorsHandling, Utilities):
    """Option menu class

    Args:
        ErrorsHandling (class): Error handling module
    """
    
    icon_base64 = b''
    plus_base64 = Utilities.creating_path('button.png')
    minus_base64 = Utilities.creating_path('button_1.png')
    defaults_base64 = Utilities.creating_path('button_defaults.png')
    back_base64 = Utilities.creating_path('button_back.png')
    apply_base64 = Utilities.creating_path('button_apply.png')
    default_break_time = 5
    default_session_time = 20
    default_big_break_time = 20
    default_big_break_count = 4
    DEFAULTS = [5, 20, 20, 4]
    DEFAULTS_TO_SAVE = []
    sg.theme('LightGrey')
    
    def __init__(self) -> None:
        super().__init__()


    def assigning_values(self):
        """Error handling method"""
        if ErrorsHandling.file_existence("default_settings.json"):

            self.DEFAULTS_TO_SAVE = Utilities.reading_defaults_from_file("default_settings.json")

        else:
            Utilities.saving_defaults_to_file(self.DEFAULTS, "default_settings.json")
            self.DEFAULTS_TO_SAVE = Utilities.reading_defaults_from_file("default_settings.json")
            
        self.default_break_time = self.DEFAULTS_TO_SAVE[0]
        self.default_session_time = self.DEFAULTS_TO_SAVE[1]
        self.default_big_break_time = self.DEFAULTS_TO_SAVE[2]
        self.default_big_break_count = self.DEFAULTS_TO_SAVE[3]


    def start_options_window(self):
        """Option window setter"""
        self.assigning_values()
        options_layout = [[[sg.Text("Default session time(min):", font=('Open Sans Bold', 30), size=(31,1)), 
                            sg.Button('', image_filename=self.plus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), key='DSTP'),
                             sg.Input(self.default_session_time,  text_color='#c3111a',font=('Open Sans Bold', 30), border_width=0, background_color=(sg.theme_background_color()),size=(2,5), 
                            expand_y=True,key='DST'), 
                            sg.Button('', image_filename=self.minus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='DSTM')]],

                            [[sg.Text("Default break time(min):", font=('Open Sans Bold', 30), size=(31,1)), 
                              sg.Button('', image_filename=self.plus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0,  key='DBTP'),
                               sg.Input(self.default_break_time, text_color='#c3111a',font=('Open Sans Bold', 30), border_width=0, background_color=(sg.theme_background_color()),size=(2,5), 
                                expand_y=True,key='DBT'),
                                sg.Button('', image_filename=self.minus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0,  key='DBTM')]],

                            [[sg.Text("Default big break time(min):", font=('Open Sans Bold', 30), size=(31,1)), 
                              sg.Button('', image_filename=self.plus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='DBBTP'),
                               sg.Input(self.default_big_break_time, text_color='#c3111a',font=('Open Sans Bold', 30), border_width=0, background_color=(sg.theme_background_color()),size=(2,5), 
                                expand_y=True,key='DBBT'), 
                                sg.Button('', image_filename=self.minus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='DBBTM')]],

                            [[sg.Text("Default sessions count before big break:", font=('Open Sans Bold', 30), size=(31,1)), 
                              sg.Button('', image_filename=self.plus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='DBBCP'),
                               sg.Input(self.default_big_break_count, text_color='#c3111a',font=('Open Sans Bold', 30), border_width=0, background_color=(sg.theme_background_color()),size=(2,5), 
                                expand_y=True,key='DBBC'), 
                                sg.Button('', image_filename=self.minus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0,  key='DBBCM')]],
                                
                            [sg.Button('', image_filename=self.back_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='BACK'),
                             sg.Button('', image_filename=self.apply_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='APPLY' ),
                             sg.Text('', size=(63, 0)),
                             sg.Button('', image_filename=self.defaults_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='DEFAULTS')]
                        ]   
        
        
        options_window = sg.Window('Options', options_layout, icon=self.icon_base64)
        
        while True:
            event, values = options_window.read(timeout=0)

            if event == sg.WIN_CLOSED:
                break

            if event == 'DSTP':
                self.default_session_time += 1
                self.default_session_time = ErrorsHandling.handling_negatives(self.default_session_time, 360)
                options_window['DST'].update(self.default_session_time)
            
            if event == 'DSTM':
                self.default_session_time -= 1
                self.default_session_time = ErrorsHandling.handling_negatives(self.default_session_time, 360)
                options_window['DST'].update(self.default_session_time)

            if event == 'DBTP':
                self.default_break_time += 1
                self.default_break_time = ErrorsHandling.handling_negatives(self.default_break_time, 360)
                options_window['DBT'].update(self.default_break_time)

            if event == 'DBTM':
                self.default_break_time -= 1
                self.default_break_time = ErrorsHandling.handling_negatives(self.default_break_time, 360)
                options_window['DBT'].update(self.default_break_time)

            if event == 'DBBTP':
                self.default_big_break_time += 1
                self.default_big_break_time = ErrorsHandling.handling_negatives(self.default_big_break_time, 360)
                options_window['DBBT'].update(self.default_big_break_time)

            if event == 'DBBTM':
                self.default_big_break_time -= 1
                self.default_big_break_time = ErrorsHandling.handling_negatives(self.default_big_break_time, 360)
                options_window['DBBT'].update(self.default_big_break_time)

            if event == 'DBBCP':
                self.default_big_break_count += 1
                self.default_big_break_count = ErrorsHandling.handling_negatives(self.default_big_break_count, 360)
                options_window['DBBC'].update(self.default_big_break_count)
            
            if event == 'DBBCM':
                self.default_big_break_count -= 1
                self.default_big_break_count = ErrorsHandling.handling_negatives(self.default_big_break_count, 360)
                options_window['DBBC'].update(self.default_big_break_count)

            if event == 'DEFAULTS':
                self.default_break_time = self.DEFAULTS[0]
                self.default_session_time = self.DEFAULTS[1]
                self.default_big_break_time = self.DEFAULTS[2]
                self.default_big_break_count = self.DEFAULTS[3]
                options_window['DBBC'].update(self.default_big_break_count)
                options_window['DBBT'].update(self.default_big_break_time)
                options_window['DBT'].update(self.default_break_time)
                options_window['DST'].update(self.default_session_time)
            
            if event == 'BACK':
                options_window.close()
                return
            
            if event == 'APPLY':
                if (ErrorsHandling.handling_popups_empty_value(values['DBT'], "ERROR: Default break time value is empty\n(try adding 0 to the box)") or
                    ErrorsHandling.handling_popups_empty_value(values['DST'], "ERROR: Default session time value is empty\n(try adding 0 to the box)") or
                    ErrorsHandling.handling_popups_empty_value(values['DBBT'], "ERROR: Default big break time value is empty\n(try adding 0 to the box)") or
                    ErrorsHandling.handling_popups_empty_value(values['DBBC'], "ERROR: Default big break count value is empty\n(try adding 0 to the box)")):
                    pass

                else:
                    self.default_break_time = int(values['DBT'])
                    self.default_session_time = int(values['DST'])
                    self.default_big_break_time = int(values['DBBT'])
                    self.default_big_break_count = int(values['DBBC'])
                    self.DEFAULTS_TO_SAVE = []
                    self.DEFAULTS_TO_SAVE.extend((self.default_break_time, self.default_session_time, self.default_big_break_time, self.default_big_break_count))
                    Utilities.saving_defaults_to_file(self.DEFAULTS_TO_SAVE, "default_settings.json")


class TimerMenu(OptionsMenu):
    """Timer menu setter"""
    cancel_base64 = Utilities.creating_path('button_cancel.png')
    session_title = ""
    current_session_info = []
    ss_base64 = Utilities.creating_path('button_start-session.png')

    if ErrorsHandling.file_existence("previous_sessions.json"):
        previous_sessions = Utilities.reading_defaults_from_file("previous_sessions.json")

    else:
        previous_sessions = []
    hour = 0
    min = 0
    sec = 0
    running = True
    sg.theme('LightGrey')

    def start_timer_menu(self):
        self.current_session_info = []
        layout = [  [sg.Text("Session title:", font=('Open Sans Bold', 30)), sg.InputText(self.session_title, expand_y=True, 
                    text_color='#c3111a', background_color=(sg.theme_background_color()), font=('Open Sans Bold', 30), size=(14,2), key='TITLE')],

                    [sg.Text("Number of hours:", font=('Open Sans Bold', 30) , size=(16,1)), 
                     sg.Button('', image_filename=self.plus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), 
                    border_width=0, key='Hp'), 
                    sg.Input(self.hour,key='HOURS', text_color='#c3111a',font=('Open Sans Bold', 30), border_width=0, background_color=(sg.theme_background_color()),size=(2,5), expand_y=True), 
                    sg.Button('', image_filename=self.minus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='Hm')],

                    [sg.Text("Number of minutes:", font=('Open Sans Bold', 30) , size=(16,1)), 
                     sg.Button('', image_filename=self.plus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), 
                    border_width=0, key='Mp'), 
                    sg.Input(self.hour,key='MINUTES', text_color='#c3111a', font=('Open Sans Bold', 30), border_width=0, background_color=(sg.theme_background_color()),size=(2,5), expand_y=True), 
                    sg.Button('', image_filename=self.minus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='Mm')],

                    [sg.Text("Number of seconds:", font=('Open Sans Bold', 30) , size=(16,1)), 
                     sg.Button('', image_filename=self.plus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), 
                    border_width=0, key='Sp'), 
                    sg.Input(self.hour,key='SECONDS', text_color='#c3111a', font=('Open Sans Bold', 30), border_width=0, background_color=(sg.theme_background_color()),size=(2,5), expand_y=True), 
                    sg.Button('', image_filename=self.minus_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='Sm')],

                    [sg.Button('', image_filename=self.back_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='BACK'),
                     sg.Text('', size=(28,0)),
                     sg.Button('', image_filename=self.ss_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='START SESSION' )]
                ]
        window = sg.Window('Pomodoro-App', layout, icon=self.icon_base64,finalize=True)

        while True:
            event, values = window.read(timeout=0)
            
            
            if event == sg.WIN_CLOSED or event == 'BACK':
                break

            if event == 'Hp':
                self.hour += 1
                self.hour = ErrorsHandling.handling_negatives(self.hour, 24)
                window['HOURS'].update(value=str(self.hour))
                
            if event == 'Hm':
                self.hour -= 1
                self.hour = ErrorsHandling.handling_negatives(self.hour, 24)
                window['HOURS'].update(value=str(self.hour))

            if event == 'Mm':
                self.min -= 1
                self.min = ErrorsHandling.handling_negatives(self.min, 60)
                window['MINUTES'].update(value=str(self.min))

            if event == 'Mp':
                self.min += 1
                self.min = ErrorsHandling.handling_negatives(self.min, 60)
                window['MINUTES'].update(value=str(self.min))

            if event == 'Sm':
                self.sec -= 1
                self.sec = ErrorsHandling.handling_negatives(self.sec, 60)
                window['SECONDS'].update(value=str(self.sec))

            if event == 'Sp':
                self.sec += 1
                self.sec = ErrorsHandling.handling_negatives(self.sec, 60)
                window['SECONDS'].update(value=str(self.sec))

            if event == 'START SESSION':
                
                if (ErrorsHandling.handling_popups_empty_value_title(values['TITLE'], "Please add session title") or
                    ErrorsHandling.handling_popups_empty_value(values['HOURS'], "ERROR: Hour value is empty\n(try adding 0 to the box)") or
                    ErrorsHandling.handling_popups_empty_value(values['MINUTES'], "ERROR: Minutes value is empty\n(try adding 0 to the box)") or
                    ErrorsHandling.handling_popups_empty_value(values['SECONDS'], "ERROR: Seconds value is empty\n(try adding 0 to the box)")):
                    pass
                else:
                    self.session_title = values['TITLE']
                    self.hour = int(values['HOURS'])
                    self.min = int(values['MINUTES'])
                    self.sec = int(values['SECONDS'])
                    window.Hide()
                    date = datetime.date.today()
                    date = date.strftime("%d/%m/%Y")
                    self.current_session_info.extend((self.session_title, '{:02d}:{:02d}:{:02d}'.format(self.hour, self.min, self.sec), date))
                    Tm = TimerWindow
                    Tm.start_timer_window(self)
                    window.UnHide()
        window.close()


class TimerWindow(TimerMenu):
    """Timer window setter"""
    def start_timer_window(self):
        OptionsMenu.assigning_values(self)
        self.running = True
        total_countdown_time = self.hour * 3600 + self.min * 60 + self.sec
        time_gone = 0
        total_pomodoros = 0
        timer = datetime.timedelta(seconds=total_countdown_time)
        layout1 = [
                    [sg.Text('', font=('Open Sans Bold', 30),  text_color='#0d7070',justification='center', key='LABEL')],
                    [sg.Text(timer, font=('Open Sans Bold', 40), justification='center', key='TIMER')],
                    [sg.Button('', image_filename=self.cancel_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='CANCEL')]
                   ]
        
        timer_window = sg.Window('Timer', layout1, icon=self.icon_base64, element_justification='c')

        while self.running is True:
            event, values = timer_window.read(timeout=0)
            timer_window['LABEL'].update('Time to learn!')

            while total_countdown_time > 0:
                event, values = timer_window.read(timeout=0)

                if event == sg.WIN_CLOSED or total_countdown_time == -1 or event == 'CANCEL':
                    break

                total_countdown_time -= 1
                if time_gone == (self.default_session_time*60):
                    break_countdown_time = 0
                    total_pomodoros += 1
                    time_gone = 0

                    if total_pomodoros % self.default_big_break_count*60 == 0:
                        timer_window['LABEL'].update('Time for big break!')
                        break_countdown_time = self.default_big_break_count*60
                        Utilities.notify('Time for big break!', f'You made through {total_pomodoros} pomodoros!')
                        while time_gone < self.default_big_break_time*60:
                            timer_window['TIMER'].update(timer)

                            if total_countdown_time == -1:
                                break

                            timer = datetime.timedelta(seconds=break_countdown_time)
                            event = timer_window.read(timeout=0)
                            timer_window['TIMER'].update(timer)
                            break_countdown_time -= 1
                            total_countdown_time -= 1
                            time.sleep(1)
                            time_gone += 1
                    else:
                        timer_window['LABEL'].update('Time for break!')
                        Utilities.notify('Time for break!', f'You made through {total_pomodoros} pomodoros!')
                        break_countdown_time = self.default_break_time*60
                        while time_gone < self.default_break_time*60:
                            
                            if total_countdown_time == -1:
                                break
                            timer = datetime.timedelta(seconds=break_countdown_time)
                            event = timer_window.read(timeout=0)
                            timer_window['TIMER'].update(timer)
                            break_countdown_time -= 1
                            total_countdown_time -= 1 
                            time.sleep(1)
                            time_gone += 1
                        Utilities.notify('Time to learn again!', 'Stay focused, keep It up!')                         
                        time_gone = 0
                event = timer_window.read(timeout=0)
                timer_window['LABEL'].update('Time to learn!')
                timer = datetime.timedelta(seconds=total_countdown_time)
                timer_window['TIMER'].update(timer)
                time.sleep(1)
                time_gone +=1
            if total_countdown_time == 0:
                self.current_session_info.append(str(total_pomodoros))
                self.previous_sessions.append(self.current_session_info)
            self.running = False
        Utilities.notify(f'Session {self.session_title} ended', 'You can start a new one, keep It up!')
        timer_window.close()
        return


class SessionsMenu(TimerWindow):
    """Session menu setter"""
    del_base64 = Utilities.creating_path('button_delete.png')
    LABELS = ['Title', 'Session Time', 'Date', 'Pomodoros Count']
    def start_sessions_menu(self):
        table = sg.Table(values=self.previous_sessions,
                        headings=self.LABELS,
                        auto_size_columns=True,
                        display_row_numbers=True,
                        header_background_color='#0d7070',  
                        hide_vertical_scroll=True,
                        justification='center',
                        key='TABLE',
                        expand_x=True,
                        expand_y=True)
        sessions_menu_layout = [[table],
                                [sg.Button('', image_filename=self.back_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='BACK'),
                                 sg.Text('', size=(31,0)),
                                 sg.Button('', image_filename=self.del_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='DELETE')]]
        sessions_window = sg.Window("Previous Sessions", sessions_menu_layout, icon=self.icon_base64,resizable=True)
        while True:
            event, values = sessions_window.read(timeout=0)

            if event == sg.WIN_CLOSED or event == 'BACK':
                sessions_window.close()
                break
            
            if event == 'DELETE':
                selected_row = values['TABLE']

                if len(selected_row) > 1:
                    del self.previous_sessions[selected_row[0]:selected_row[-1]+1]

                if len(selected_row) == 1:
                    self.previous_sessions.pop(selected_row[0])
                table.update(self.previous_sessions)
        return


class MainMenu(SessionsMenu):
    """Main menu setter"""
    sg.theme('LightGrey')
    Ys_base64 = Utilities.creating_path("your_sessions.png")
    Op_base64 = Utilities.creating_path("button_options.png")
    Qt_base64 = Utilities.creating_path("button_quit.png")
    Tm_base64 = Utilities.creating_path("button_timer-menu.png")


    def start_main_menu(self):
        op = OptionsMenu()
        tm = TimerMenu()
        sm = SessionsMenu()
        main_menu_layout = [[sg.Image(Utilities.creating_path('pomodoro.png'), key='LOGO')],
                        [sg.Button('', image_filename=self.Tm_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='TM')],
                        [sg.Button('', image_filename=self.Ys_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='YS')],
                        [sg.Button('', image_filename=self.Op_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='OP')],
                        [sg.Button('', image_filename=self.Qt_base64, button_color=(sg.theme_background_color(),sg.theme_background_color()), border_width=0, key='QT')],
                      ]
        main_menu_window = sg.Window('Pomodoro App', main_menu_layout, icon=self.icon_base64, finalize=True, element_justification='c')

        while True:
            event, values = main_menu_window.read(timeout=0)

            if event == 'TM':
                main_menu_window.Hide()
                tm.start_timer_menu()
                main_menu_window.UnHide()

            if event == 'YS':
                main_menu_window.Hide()
                sm.start_sessions_menu()
                main_menu_window.UnHide()

            if event == 'OP':
                main_menu_window.Hide()
                op.start_options_window()
                main_menu_window.UnHide()

            if event == sg.WIN_CLOSED or event == "QT":
                main_menu_window.Close()
                Utilities.saving_defaults_to_file(self.previous_sessions, 'previous_sessions.json')
                return
